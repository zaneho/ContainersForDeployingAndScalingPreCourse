kubectl version --client
download config from DO kubernates
mkdir .kube in home dir C:/Users/urname
kubectl cluster-info
kubectl get pod
kubectl get pod -nkube-system

kubectl create namespace myns
kubectl get namespace

kubectl describe ns myns
# same as kubectl describe ns/myns
kubectl delete ns/myns

kubectl api-resources

# create ns via yaml file
kubectl create -f myns.yaml
kubectl get ns -ldept=eng
kubectl get ns --show-labels
kubectl delete ns -lcode=eng01

if create (imperative command, dumb) again with same name is error
if use apply (smarter) it will check if rsc alr thr thn rewrite, so usually we use apply


# POD
kubectl apply -f dov-bear.yaml
kubectl get all -nmyns
kubectl describe pods dov-pod -n myns
kubectl port-forward pod/dov-pod 8080:3000
    ^ if exit cannot access, its temporary
kubectl describe pods dov-pod -n myns
kubectl delete pod dov-pod -nmyns

kubectl logs po/dov-pod -nmyns
kubectl exec -ti pod/dov-pod -nmyns -- /bin/sh

# DEPLOYMENT
selector matchLabels is subset of template labels..

kubectl apply -f deployment.yaml
kubectl get deployment -nmyns
kubectl describe deploy myapp-pod
kubectl port-forward deployment/dov-deploy -n myns 8080:3000

kubectl scale deploy/dov-deploy -nmyns --replica=5
kubectl scale deploy/dov-deploy -nmyns --replica=1

# SERVICE
can write under deployment after ---
kubectl describe svc/dov-svc -n myns

kubectl port-forward svc/dov-svc -nmyns 8080:8080
kubectl port-forward svc/dov-svc -nmyns 5000:8080
8080 is service port, not container port
local is 5000


# DEUBG
kubectl run debug -ti --rm -ndefault --image=nicolaka/netshoot -- /bin/bash
nslookup dov-svc.myns.svc.cluster.local
nslookup -q=srv _web._TCP.dov-svc.myns.svc.cluster.local

# CONFIG myapp
kubectl apply -f config.yaml
kubectl get cm,secret -nmyns
kubectl delete -f config.yaml

#workshop 2
1 file for config and ns. put pw in secret, env in config map
1 file for db
1 file for app

kubectl run mysql -ti --rm --image=mysql:8 -- /bin/sh

# this command quick populate and output to yaml file
kubectl create deploy bggapp-deploy -nbggns --image=stackupiss/bgg-backend:v1 --replicas=3 -oyaml --dry-run=client

# NODE PORT
For the service you wan to expose, change ClusterIP to NodePort
this will open same port number eg 31000 on each pod

kubectl get all -nbggns
    to see eg 3000:30130/TCP.. 30130 auto assigned and opened on pod

kubectl get nodes -owide
    to see external IP of any

thn access http://165.232.165.178:30130/
now we manage to access without port-forwarding

# LOAD BALANCER
if you have LB, it builds on top of  ClusterIP and NodePort
LoadBalancer -> NodePort -> CluterIP [svc port:80, targetPort 3000] -> Pod [containerPort: 3000]

kubectl get all -nbggns
then you access via LB IP address and your app-svc pod port eg 3000.. not targetPort (this is to to comms wif container)

# UPGRADES
Argo Rollout

kubectl rollout status deploy/bggapp-deploy -nbggns
kubectl rollout history deploy/bggapp-deploy -nbggns

kubectl rollout undo deployment bggapp-deploy -nbggns --to-revision=2